# -*- coding: utf-8 -*-
"""CodersCave intern task 2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WUrfMpvcb7y3iAtGZqm3BY42CqENUMi1

Hii, everyone here is an EDA of a time series data, the data set contains data of weather over a day, a month and three hours. I have used libraries like pandas, plotly.express.
"""

import pandas as pd
import plotly.express as xp
d = pd.read_csv("/content/drive/MyDrive/intern/task 2 data set/daily_data.csv")

"""The code converts the "DATE" column in a Pandas DataFrame (`d`) to datetime format using the `pd.to_datetime()` function and assigns the converted values back to the "DATE" column."""

d["DATE"] = pd.to_datetime(d["DATE"])

"""The code groups the DataFrame `d` by the "DATE" column and calculates the maximum value of the "DailyAverageDewPointTemperature" for each group. The result is a Series (`g`) with the maximum dew point temperature for each unique date."""

g = d.groupby(d["DATE"])["DailyAverageDewPointTemperature"].max()

"""The code uses a library (possibly Plotly Express) to create a line plot (`l`) showing the variation of "DailyAverageDewPointTemperature" over time. The x-axis represents dates from the "DATE" column, and the y-axis shows the corresponding dew point temperatures. The `l.show()` command displays the plot."""

l = xp.line(g, x =d[ "DATE"], y = "DailyAverageDewPointTemperature")
l.show()

"""The code uses Plotly Express to create a bubble plot (`bubble`) where "DailyAverageWindSpeed" is on the x-axis, "DailyCoolingDegreeDays" is on the y-axis, the size of each bubble is determined by "DailyAverageWindSpeed," and the color of each bubble corresponds to "DailyCoolingDegreeDays." The `bubble.show()` command displays the resulting plot."""

bubble = xp.scatter(d, x = "DailyAverageWindSpeed", y = "DailyCoolingDegreeDays", size = "DailyAverageWindSpeed", color = "DailyCoolingDegreeDays")
bubble.show()

"""The code uses Plotly Express to create a scatter map plot (`fig`) with Mapbox. The latitude is represented by the "BackupLatitude" column, longitude by the "BackupLongitude" column, the text label for each point is "DailyAverageWindSpeed," and the size of the markers is determined by "DailyAverageWindSpeed." The title of the plot is set to 'Sample Map Plot', and the zoom level is set to 4. The layout is adjusted with `fig.update_layout()` to use the "open-street-map" style and modify margins. Finally, `fig.show()` displays the map plot."""

fig = xp.scatter_mapbox(d, lat='BackupLatitude', lon='BackupLongitude', text='DailyAverageWindSpeed', size='DailyAverageWindSpeed',title='Sample Map Plot', zoom=4)
fig.update_layout( mapbox_style="open-street-map", margin=dict(l=0, r=0, t=40, b=0),)
fig.show()

import pandas as pd
d = pd.read_csv("/content/drive/MyDrive/intern/task 2 data set/monthly_data.csv")

"""The code groups the DataFrame `d` by the "MonthlyDaysWithGT001Precip" column and calculates the sum of "MonthlyDepartureFromNormalMaximumTemperature" for each group. The result is a Series (`g`) displaying the summed departure from normal maximum temperature for each unique value in the "MonthlyDaysWithGT001Precip" column. The result is printed using `print(g)`."""

g = d.groupby("MonthlyDaysWithGT001Precip")["MonthlyDepartureFromNormalMaximumTemperature"].sum()
print(g)

"""The code uses Plotly Express to create a bar plot (`bar`). The x-axis represents the "MonthlyDaysWithGT001Precip" values from the DataFrame `d`, and the y-axis represents the corresponding "MonthlyDepartureFromNormalMaximumTemperature" values. The `bar.show()` command displays the resulting bar plot."""

bar = xp.bar(g, x =d["MonthlyDaysWithGT001Precip"], y  = d["MonthlyDepartureFromNormalMaximumTemperature"])
bar.show()

"""The code uses Plotly Express to create a histogram (`hist`) of the "MonthlyGreatestSnowfall" values from the DataFrame `d`. The `hist.show()` command displays the resulting histogram plot."""

hist = xp.histogram(d["MonthlyGreatestSnowfall"])
hist.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
d = pd.read_csv("/content/drive/MyDrive/intern/task 2 data set/three_hour_data.csv")

"""The code calculates the correlation matrix (`corr`) for the DataFrame `d` and then uses Seaborn (`sns`) to create a heatmap (`heat`) of the correlations. The `annot=True` parameter adds the numerical values to the heatmap. Finally, `plt.show()` displays the heatmap."""

corr = d.corr()
heat = sns.heatmap(corr,annot = True)
plt.show()

import pandas as pd
d = pd.read_csv("/content/drive/MyDrive/intern/task 2 data set/three_hour_data.csv")

"""The code uses Plotly Express to create a scatter plot (`scatter`) with "HourlyRelativeHumidity" on the x-axis and "HourlyPressureTendency" on the y-axis. The plot is given the title 'HUMIDITY AND PRESSURE,' and `scatter.show()` displays the resulting scatter plot."""

scatter = xp.scatter(d, x="HourlyRelativeHumidity", y="HourlyPressureTendency", title=' HUMIDITY AND PREASURE')
scatter.show()